/*
 * Register.h
 *
 *  Created on: Jan 11, 2024
 *      Author: TBTHANH
 *     Purpose: To create a memory map structure
 */

#ifndef REGISTER_H_
#define REGISTER_H_

/* Register address */
// Base address
#define RCC_BASE			(0x40021000)
#define GPIO_A_BASE			((uint32_t *)(0x40010800))
#define GPIO_B_BASE			((uint32_t *)(0x40010C00))
// GPIO registers (ref: RM0008 9.2)
#define GPIOx_CRL			((uint32_t *)(0x00))
#define GPIOx_CRH			((uint32_t *)(0x04))
#define GPIOx_IDR			((uint32_t *)(0x08))
#define GPIOx_ODR			((uint32_t *)(0x0C))
#define GPIOx_BSRR			((uint32_t *)(0x10))
#define GPIOx_BRR			((uint32_t *)(0x14))
#define GPIOx_LCKR			((uint32_t *)(0x18))
//  RCC clock registers
#define RCC_CR				((uint32_t *)(0x00))
#define RCC_CFGR			((uint32_t *)(0x04))
#define RCC_CIR				((uint32_t *)(0x08))
#define RCC_APB2RSTR		((uint32_t *)(0x0C))
#define RCC_APB1RSTR		((uint32_t *)(0x10))
#define RCC_AHBENR			((uint32_t *)(0x14))
#define RCC_APB2ENR         ((uint32_t *)(0x18))
#define RCC_APB1ENR         ((uint32_t *)(0x1C))
#define RCC_BDCR			((uint32_t *)(0x20))
#define RCC_CSR				((uint32_t *)(0x24))

// RCC structure
typedef struct
{
	volatile uint32_t *CR		= RCC_BASE + RCC_CR;
	volatile uint32_t *CFGR		= RCC_BASE + RCC_CFGR;
	volatile uint32_t *CIR		= RCC_BASE + RCC_CIR;
	volatile uint32_t *APB2RSTR	= RCC_BASE + RCC_APB2RSTR;
	volatile uint32_t *APB1RSTR	= RCC_BASE + RCC_APB1RSTR;
	volatile uint32_t *AHBENR	= RCC_BASE + RCC_AHBENR;
	volatile uint32_t *APB2ENR	= RCC_BASE + RCC_APB2ENR;
	volatile uint32_t *APB1ENR	= RCC_BASE + RCC_APB1ENR;
	volatile uint32_t *BDCR		= RCC_BASE + RCC_BDCR;
	volatile uint32_t *CSR		= RCC_BASE + RCC_CSR;
}RCC_;

typedef struct
{
	volatile uint32_t *CRL		= GPIO_A_BASE + GPIOx_CRL;
	volatile uint32_t *CRH		= GPIO_A_BASE + GPIOx_CRH;
	volatile uint32_t *IDR		= GPIO_A_BASE + GPIOx_IDR;
	volatile uint32_t *ODR		= GPIO_A_BASE + GPIOx_ODR;
	volatile uint32_t *BSRR		= GPIO_A_BASE + GPIOx_BSRR;
	volatile uint32_t *BRR		= GPIO_A_BASE + GPIOx_BRR;
	volatile uint32_t *LCKR		= GPIO_A_BASE + GPIOx_LCKR;
}GPIOA_;

typedef struct
{
	volatile * uint32_t *CRL		= (* uint32_t *)GPIO_B_BASE + GPIOx_CRL;
	volatile uint32_t *CRH		= GPIO_B_BASE + GPIOx_CRH;
	volatile uint32_t *IDR		= GPIO_B_BASE + GPIOx_IDR;
	volatile uint32_t *ODR		= GPIO_B_BASE + GPIOx_ODR;
	volatile uint32_t *BSRR		= GPIO_B_BASE + GPIOx_BSRR;
	volatile uint32_t *BRR		= GPIO_B_BASE + GPIOx_BRR;
	volatile uint32_t *LCKR		= GPIO_B_BASE + GPIOx_LCKR;
}GPIOB_;

#endif /* REGISTER_H_ */
