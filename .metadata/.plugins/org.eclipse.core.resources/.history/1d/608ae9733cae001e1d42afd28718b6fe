/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Tran Ba Thanh
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

/*Input:
 * 	A0:Walk
 * 	A1:West
 * 	A2:South
 *
 *Input value:
 *	0x0 = 000 = no sensor
 *	0x1 = 001 = Walk sensor
 *	0x2 = 010 = West sensor
 *	0x3 = 011 = Walk and West sensor
 *	0x4 = 100 = South sensor
 *	0x5 = 101 = South and Walk sensor
 *	0x6 = 110 = South and West sensor
 *	0x7 = 111 = all three sensor
 *
 *Priority
 *	South > West > Walk
 *
 *Output:
 * 	B0: White Walk light
 * 	B1: Red Walk light
 * 	B4: R South light
 * 	B5: Y South light
 * 	B6: G South light
 * 	B7: R South light
 * 	B8: Y South light
 * 	B9: G South light
 *
 *For more info, please visit: https://github.com/Tbthanh/STM32f103c8xx_code_following_ECE319K
 *FSM and the excel sheet can be found: STM32f103c8xx_code_following_ECE319K/lab05_trafic_light/00_Others/
 *
 */

#include <stdint.h>

#include <stdint.h>
// #include "PLL.h"
// #include "SysTick.h"

// portB registers
#define GPIO_B_BASE			(0x40010C00)
#define GPIO_B_CRL			(GPIO_B_BASE + 0x00)
#define GPIO_B_CRH			(GPIO_B_BASE + 0x04)
//#define GPIO_B_IDR			(GPIO_B_BASE + 0x08)
#define GPIO_B_ODR			(GPIO_B_BASE + 0x0C)

// portA registers
#define GPIO_A_BASE			(0x40010800)
#define GPIO_A_CRL			(GPIO_A_BASE + 0x00)
#define GPIO_A_IDR			(GPIO_A_BASE + 0x08)
#define GPIO_A_ODR			(GPIO_A_BASE + 0x0C)

//  RCC clock registers
#define RCC_BASE			(0x40021000)
#define RCC_APB2ENR         (RCC_BASE + 0x18)

// states
#define jSo		0
#define wSo		1
#define rSo		2
#define	jWe		3
#define wWe		4
#define rWe		5
#define jWa		6
#define wWa		7
#define rWa		8
#define rAl		9

// state Structure
struct State
{
	uint32_t OutB;		// 6-bit output for port B for road light
	uint32_t Time;		// x10 ms
	uint8_t Next[8];	// depends on 3-bit input
};

// Blink of walk need to look into more!!
// FSM of states
typedef const struct State STyp;
STyp FSM[10]={
	// jSo : just South
	{0x0C0,1000,{waitN,waitN,goN,waitN,waitN,waitN,waitN,waitN}},
	// wSo : wait South
	{0x0A0,160,{waitSafetyN,waitSafetyN,waitSafetyE,waitSafetyN,walkN,walkN,walkN,walkN}},
	// rSo : red South
	{0x090,80,{}},
	// jWe : just West
	{0x210,400,{}},
	// wWe : wait West
	{0x110,200,{}},
	// rWe : red West
	{0x090,400,{}},
	// jWa : just Walk
	{0x090,160,{}},
	// wWa : wait Walk
	{0x090,80,{}},
	// rWa : red Walk
	{0x090,400,{}},
	// rAl : red All
	{0x090,200,{}}
};

// initialize port B 4-9 and B 0-1
void portB_Init(void)
{
	// CRL for pin B 4-7 and 0-1
	*GPIO_B_CRL |= 0x11110011;
	// CLH for pin B 8-9
	*GPIO_B_CLH |= 0x00000011;
	// Optional for clearing / setting the LED
}

// initialize port A 0-2
void portA_Init(void)
{
	// CRL for pin A 0-2
	*GPIO_A_CRL |= 0x00000088;
	// Pull up pin A 0-2
	*GPIO_B_ODR |= 0x00000003;
}

int main(void)
{
	// Enable RCC for GPIO
	*RCC_APB2ENR |= 0x0C;

	// Give time to stabilize the clock
	while(0 == (*RCC_APB2ENR & 0x0C)){}

	// Initialize GPIOs
	portA_Init();
	portB_Init();

	// Initial state: red All
	uint8_t state = rAl;

	// Input

    /* Loop forever */
	for(;;);
}
