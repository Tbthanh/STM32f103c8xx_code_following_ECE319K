
Lab5_Traficlight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000043c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800056c  0800056c  0001056c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800060c  0800060c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800060c  0800060c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800060c  0800060c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800060c  0800060c  0001060c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000610  08000610  00010610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08000614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000068  0800067c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  0800067c  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000525  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001f3  00000000  00000000  000205f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  000207f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000060  00000000  00000000  00020878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000012e3  00000000  00000000  000208d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000007ee  00000000  00000000  00021bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000051cc  00000000  00000000  000223a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000174  00000000  00000000  00027578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000276ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	08000554 	.word	0x08000554

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	08000554 	.word	0x08000554

08000170 <SetSysClock>:
  *         Original code's link: https://github.com/Seeed-Studio/MotorBridgeCapeFirmwareSourceCode/blob/master/STM32F0xx_StdPeriph_Lib_V1.5.0/Projects/STM32F0xx_StdPeriph_Examples/RCC/RCC_Example/system_stm32f0xx.c
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	2300      	movs	r3, #0
 800017c:	603b      	str	r3, [r7, #0]
	/*            PLL (clocked by HSE) used as System clock source                */
	/******************************************************************************/

	/* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
	/* Enable HSE */
	*(RCC->CR) |= ((uint32_t)RCC_CR_HSEON);
 800017e:	4b39      	ldr	r3, [pc, #228]	; (8000264 <SetSysClock+0xf4>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b37      	ldr	r3, [pc, #220]	; (8000264 <SetSysClock+0xf4>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800018c:	601a      	str	r2, [r3, #0]

	/* Wait till HSE is ready and if Time out is reached exit */
	do
	{
		HSEStatus = *(RCC->CR) & RCC_CR_HSERDY;
 800018e:	4b35      	ldr	r3, [pc, #212]	; (8000264 <SetSysClock+0xf4>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b34      	ldr	r3, [pc, #208]	; (8000268 <SetSysClock+0xf8>)
 8000196:	4013      	ands	r3, r2
 8000198:	603b      	str	r3, [r7, #0]
		StartUpCounter++;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	3301      	adds	r3, #1
 800019e:	607b      	str	r3, [r7, #4]
	} while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d103      	bne.n	80001ae <SetSysClock+0x3e>
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80001ac:	d1ef      	bne.n	800018e <SetSysClock+0x1e>

	if ((*(RCC->CR) & RCC_CR_HSERDY) != RCC_CR_RESET)
 80001ae:	4b2d      	ldr	r3, [pc, #180]	; (8000264 <SetSysClock+0xf4>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	4b2c      	ldr	r3, [pc, #176]	; (8000268 <SetSysClock+0xf8>)
 80001b6:	4013      	ands	r3, r2
 80001b8:	2b83      	cmp	r3, #131	; 0x83
 80001ba:	d002      	beq.n	80001c2 <SetSysClock+0x52>
	{
		HSEStatus = (uint32_t)0x01;
 80001bc:	2301      	movs	r3, #1
 80001be:	603b      	str	r3, [r7, #0]
 80001c0:	e001      	b.n	80001c6 <SetSysClock+0x56>
	}
	else
	{
		HSEStatus = (uint32_t)0x00;
 80001c2:	2300      	movs	r3, #0
 80001c4:	603b      	str	r3, [r7, #0]
	}

	if (HSEStatus == (uint32_t)0x01)
 80001c6:	683b      	ldr	r3, [r7, #0]
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d145      	bne.n	8000258 <SetSysClock+0xe8>
		// Skip this because not truly understand
		/* Enable Prefetch Buffer and set Flash Latency */
		//FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;

		/* HCLK = SYSCLK */
		*(RCC->CFGR) |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80001cc:	4b25      	ldr	r3, [pc, #148]	; (8000264 <SetSysClock+0xf4>)
 80001ce:	685a      	ldr	r2, [r3, #4]
 80001d0:	4b24      	ldr	r3, [pc, #144]	; (8000264 <SetSysClock+0xf4>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	6812      	ldr	r2, [r2, #0]
 80001d6:	601a      	str	r2, [r3, #0]

		/* PCLK = HCLK */
		*(RCC->CFGR) |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 80001d8:	4b22      	ldr	r3, [pc, #136]	; (8000264 <SetSysClock+0xf4>)
 80001da:	685b      	ldr	r3, [r3, #4]
 80001dc:	681a      	ldr	r2, [r3, #0]
 80001de:	4b21      	ldr	r3, [pc, #132]	; (8000264 <SetSysClock+0xf4>)
 80001e0:	685b      	ldr	r3, [r3, #4]
 80001e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80001e6:	601a      	str	r2, [r3, #0]

		/* PLL configuration */
		// Clear bits
		*(RCC->CFGR) &= (uint32_t)((uint32_t)~0x003F0000);
 80001e8:	4b1e      	ldr	r3, [pc, #120]	; (8000264 <SetSysClock+0xf4>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	4b1d      	ldr	r3, [pc, #116]	; (8000264 <SetSysClock+0xf4>)
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80001f6:	601a      	str	r2, [r3, #0]
		//*(RCC->CFGR) &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
		// Set bits
		*(RCC->CFGR) |= (uint32_t)(0x00110000);
 80001f8:	4b1a      	ldr	r3, [pc, #104]	; (8000264 <SetSysClock+0xf4>)
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	4b19      	ldr	r3, [pc, #100]	; (8000264 <SetSysClock+0xf4>)
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	f442 1288 	orr.w	r2, r2, #1114112	; 0x110000
 8000206:	601a      	str	r2, [r3, #0]
		//*(RCC->CFGR) |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);

		/* Enable PLL */
		//*(RCC->CR) |= RCC_CR_PLLON;
		*(RCC->CR) |= (uint32_t)0x01000000;
 8000208:	4b16      	ldr	r3, [pc, #88]	; (8000264 <SetSysClock+0xf4>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	4b15      	ldr	r3, [pc, #84]	; (8000264 <SetSysClock+0xf4>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000216:	601a      	str	r2, [r3, #0]

		/* Wait till PLL is ready */
		while((*(RCC->CR) & RCC_CR_PLLRDY) == 0)
 8000218:	bf00      	nop
 800021a:	4b12      	ldr	r3, [pc, #72]	; (8000264 <SetSysClock+0xf4>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <SetSysClock+0xfc>)
 8000222:	4013      	ands	r3, r2
 8000224:	2b00      	cmp	r3, #0
 8000226:	d0f8      	beq.n	800021a <SetSysClock+0xaa>
		{
		}

		/* Select PLL as system clock source */
		//*(RCC->CFGR) &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
		*(RCC->CFGR) &= (uint32_t)((uint32_t)~(0x00000003));
 8000228:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <SetSysClock+0xf4>)
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <SetSysClock+0xf4>)
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	f022 0203 	bic.w	r2, r2, #3
 8000236:	601a      	str	r2, [r3, #0]
		//*(RCC->CFGR) |= (uint32_t)RCC_CFGR_SW_PLL;
		*(RCC->CFGR) |= (uint32_t)0x00000002;
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <SetSysClock+0xf4>)
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <SetSysClock+0xf4>)
 8000240:	685b      	ldr	r3, [r3, #4]
 8000242:	f042 0202 	orr.w	r2, r2, #2
 8000246:	601a      	str	r2, [r3, #0]

		/* Wait till PLL is used as system clock source */
		while ((*(RCC->CFGR) & (uint32_t)0x0000000C) != (uint32_t)0x00000008)
 8000248:	bf00      	nop
 800024a:	4b06      	ldr	r3, [pc, #24]	; (8000264 <SetSysClock+0xf4>)
 800024c:	685b      	ldr	r3, [r3, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f003 030c 	and.w	r3, r3, #12
 8000254:	2b08      	cmp	r3, #8
 8000256:	d1f8      	bne.n	800024a <SetSysClock+0xda>
	}
	else
	{ /* If HSE fails to start-up, the application will have wrong clock
	 configuration. User can add here some code to deal with this error */
	}
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	20000000 	.word	0x20000000
 8000268:	00020083 	.word	0x00020083
 800026c:	02000083 	.word	0x02000083

08000270 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	/* Set HSION bit */
	*(RCC->CR) |= (uint32_t)0x00000001;
 8000274:	4b18      	ldr	r3, [pc, #96]	; (80002d8 <SystemInit+0x68>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <SystemInit+0x68>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f042 0201 	orr.w	r2, r2, #1
 8000282:	601a      	str	r2, [r3, #0]

	/* Reset SW[1:0], HPRE[3:0], PPRE[2:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
	//RCC->CFGR &= (uint32_t)0xF8FFB80C;
	*(RCC->CFGR) &= (uint32_t)0xF8FFC00C;	// also reset PPRE2[2:0]
 8000284:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <SystemInit+0x68>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	6819      	ldr	r1, [r3, #0]
 800028a:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <SystemInit+0x68>)
 800028c:	685a      	ldr	r2, [r3, #4]
 800028e:	4b13      	ldr	r3, [pc, #76]	; (80002dc <SystemInit+0x6c>)
 8000290:	400b      	ands	r3, r1
 8000292:	6013      	str	r3, [r2, #0]

	/* Reset HSEON, CSSON and PLLON bits */
	*(RCC->CR) &= (uint32_t)0xFEF6FFFF;
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <SystemInit+0x68>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a0f      	ldr	r2, [pc, #60]	; (80002d8 <SystemInit+0x68>)
 800029c:	6812      	ldr	r2, [r2, #0]
 800029e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002a6:	6013      	str	r3, [r2, #0]

	/* Reset HSEBYP bit */
	*(RCC->CR) &= (uint32_t)0xFFFBFFFF;
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <SystemInit+0x68>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <SystemInit+0x68>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80002b6:	601a      	str	r2, [r3, #0]

	/* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
	*(RCC->CFGR) &= (uint32_t)0xFFC0FFFF;
 80002b8:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <SystemInit+0x68>)
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <SystemInit+0x68>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80002c6:	601a      	str	r2, [r3, #0]

	/* Reset HSI14 bit */
	//RCC->CR2 &= (uint32_t)0xFFFFFFFE;

	/* Disable all interrupts */
	*(RCC->CIR) = 0x00000000;
 80002c8:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <SystemInit+0x68>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]

	/* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
	SetSysClock();
 80002d0:	f7ff ff4e 	bl	8000170 <SetSysClock>
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000000 	.word	0x20000000
 80002dc:	f8ffc00c 	.word	0xf8ffc00c

080002e0 <SysTick_Handler>:
/**
 * @brief Interrupt handler function
 *
 */
void SysTick_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	msTicks++;
 80002e4:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <SysTick_Handler+0x18>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	3301      	adds	r3, #1
 80002ea:	4a03      	ldr	r2, [pc, #12]	; (80002f8 <SysTick_Handler+0x18>)
 80002ec:	6013      	str	r3, [r2, #0]
}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	20000084 	.word	0x20000084

080002fc <delay>:
 * @brief Add blocking delay
 *
 * @param ms delay in milliseconds
 */
void delay(int ms)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	uint32_t expected_ticks = msTicks + ms;
 8000304:	4b08      	ldr	r3, [pc, #32]	; (8000328 <delay+0x2c>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4413      	add	r3, r2
 800030c:	60fb      	str	r3, [r7, #12]
	while (msTicks < expected_ticks)
 800030e:	e000      	b.n	8000312 <delay+0x16>
	{
		__asm("nop");
 8000310:	bf00      	nop
	while (msTicks < expected_ticks)
 8000312:	4b05      	ldr	r3, [pc, #20]	; (8000328 <delay+0x2c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	429a      	cmp	r2, r3
 800031a:	d8f9      	bhi.n	8000310 <delay+0x14>
	}
}
 800031c:	bf00      	nop
 800031e:	bf00      	nop
 8000320:	3714      	adds	r7, #20
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr
 8000328:	20000084 	.word	0x20000084

0800032c <portB_Init>:
	{0x090,RedTime,{rAl,jWa,jWe,jWe,jSo,jSo,jSo,jSo}}
};

// initialize port B 4-9 and B 0-1
void portB_Init(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	// CRL for pin B 4-7 and 0-1
	*(GPIOB->CRL) |= 0x11110011;
 8000330:	4b0a      	ldr	r3, [pc, #40]	; (800035c <portB_Init+0x30>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a09      	ldr	r2, [pc, #36]	; (800035c <portB_Init+0x30>)
 8000338:	6812      	ldr	r2, [r2, #0]
 800033a:	f043 5388 	orr.w	r3, r3, #285212672	; 0x11000000
 800033e:	f043 1311 	orr.w	r3, r3, #1114129	; 0x110011
 8000342:	6013      	str	r3, [r2, #0]
	// CLH for pin B 8-9
	*(GPIOB->CRH) |= 0x00000011;
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <portB_Init+0x30>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	4b04      	ldr	r3, [pc, #16]	; (800035c <portB_Init+0x30>)
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	f042 0211 	orr.w	r2, r2, #17
 8000352:	601a      	str	r2, [r3, #0]
	// Optional for clearing / setting the LED
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	2000004c 	.word	0x2000004c

08000360 <portA_Init>:

// initialize port A 0-2
void portA_Init(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
	// CRL for pin A 0-2
	*(GPIOA->CRL) |= (uint32_t)0x00000088;
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <portA_Init+0x2c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <portA_Init+0x2c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f042 0288 	orr.w	r2, r2, #136	; 0x88
 8000372:	601a      	str	r2, [r3, #0]
	// Pull up pin A 0-2
	*(GPIOA->ODR) |= (uint32_t)0x00000003;
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <portA_Init+0x2c>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b04      	ldr	r3, [pc, #16]	; (800038c <portA_Init+0x2c>)
 800037c:	68db      	ldr	r3, [r3, #12]
 800037e:	f042 0203 	orr.w	r2, r2, #3
 8000382:	601a      	str	r2, [r3, #0]
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	20000030 	.word	0x20000030

08000390 <flashing>:

// function for flashing walking light 4 times B0-1
void flashing(uint32_t time)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	time /= 8;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	08db      	lsrs	r3, r3, #3
 800039c:	607b      	str	r3, [r7, #4]
	int8_t count = 5;
 800039e:	2305      	movs	r3, #5
 80003a0:	73fb      	strb	r3, [r7, #15]
	while(count--)
 80003a2:	e027      	b.n	80003f4 <flashing+0x64>
	{
		*(GPIOB->ODR) |= 0x03;		// ensure the led on
 80003a4:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <flashing+0x80>)
 80003a6:	68db      	ldr	r3, [r3, #12]
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	4b19      	ldr	r3, [pc, #100]	; (8000410 <flashing+0x80>)
 80003ac:	68db      	ldr	r3, [r3, #12]
 80003ae:	f042 0203 	orr.w	r2, r2, #3
 80003b2:	601a      	str	r2, [r3, #0]
		*(GPIOB->ODR) &= 0xFFFFFFFE;	// turn off white
 80003b4:	4b16      	ldr	r3, [pc, #88]	; (8000410 <flashing+0x80>)
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b15      	ldr	r3, [pc, #84]	; (8000410 <flashing+0x80>)
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	f022 0201 	bic.w	r2, r2, #1
 80003c2:	601a      	str	r2, [r3, #0]
		delay(time);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ff98 	bl	80002fc <delay>
		*(GPIOB->ODR) |= 0x03;		// ensure the led on
 80003cc:	4b10      	ldr	r3, [pc, #64]	; (8000410 <flashing+0x80>)
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <flashing+0x80>)
 80003d4:	68db      	ldr	r3, [r3, #12]
 80003d6:	f042 0203 	orr.w	r2, r2, #3
 80003da:	601a      	str	r2, [r3, #0]
		*(GPIOB->ODR) &= 0xFFFFFFFD;	// turn off red
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <flashing+0x80>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <flashing+0x80>)
 80003e4:	68db      	ldr	r3, [r3, #12]
 80003e6:	f022 0202 	bic.w	r2, r2, #2
 80003ea:	601a      	str	r2, [r3, #0]
		delay(time);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff ff84 	bl	80002fc <delay>
	while(count--)
 80003f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	3a01      	subs	r2, #1
 80003fc:	b2d2      	uxtb	r2, r2
 80003fe:	73fa      	strb	r2, [r7, #15]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d1cf      	bne.n	80003a4 <flashing+0x14>
	}
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop
 8000408:	3710      	adds	r7, #16
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	2000004c 	.word	0x2000004c

08000414 <main>:

int main(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
	// initialize 48 MHz system clock
	SystemInit();
 800041a:	f7ff ff29 	bl	8000270 <SystemInit>

	// Enable RCC for GPIO
	*(RCC->APB2ENR) |= 0x0C;
 800041e:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <main+0x94>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	4b20      	ldr	r3, [pc, #128]	; (80004a8 <main+0x94>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f042 020c 	orr.w	r2, r2, #12
 800042c:	601a      	str	r2, [r3, #0]

	// Give time to stabilize the clock
	while(0 == (*(RCC->APB2ENR) & 0x0C)){}
 800042e:	bf00      	nop
 8000430:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <main+0x94>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f003 030c 	and.w	r3, r3, #12
 800043a:	2b00      	cmp	r3, #0
 800043c:	d0f8      	beq.n	8000430 <main+0x1c>

	// Initialize GPIOs
	portA_Init();
 800043e:	f7ff ff8f 	bl	8000360 <portA_Init>
	portB_Init();
 8000442:	f7ff ff73 	bl	800032c <portB_Init>

	// Initial state: red All
	uint8_t state = rAl;
 8000446:	2309      	movs	r3, #9
 8000448:	71fb      	strb	r3, [r7, #7]

	// Input
	volatile uint32_t input = 0x00;
 800044a:	2300      	movs	r3, #0
 800044c:	603b      	str	r3, [r7, #0]

    /* Loop forever */
	for(;;)
	{
		// set the output to the current state
		*GPIOB->ODR = FSM[state].Output;
 800044e:	79fa      	ldrb	r2, [r7, #7]
 8000450:	4b16      	ldr	r3, [pc, #88]	; (80004ac <main+0x98>)
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	4916      	ldr	r1, [pc, #88]	; (80004b0 <main+0x9c>)
 8000456:	0112      	lsls	r2, r2, #4
 8000458:	440a      	add	r2, r1
 800045a:	6812      	ldr	r2, [r2, #0]
 800045c:	601a      	str	r2, [r3, #0]

		// check if wWa
		if (state == wWa)
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	2b07      	cmp	r3, #7
 8000462:	d109      	bne.n	8000478 <main+0x64>
		{
			// flash white-red-off
			flashing(FSM[state].Time);
 8000464:	79fb      	ldrb	r3, [r7, #7]
 8000466:	4a12      	ldr	r2, [pc, #72]	; (80004b0 <main+0x9c>)
 8000468:	011b      	lsls	r3, r3, #4
 800046a:	4413      	add	r3, r2
 800046c:	3304      	adds	r3, #4
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff ff8d 	bl	8000390 <flashing>
 8000476:	e008      	b.n	800048a <main+0x76>
		}
		else
		{
			// delay 10ms * FSM[state].Time
			delay(FSM[state].Time);
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	4a0d      	ldr	r2, [pc, #52]	; (80004b0 <main+0x9c>)
 800047c:	011b      	lsls	r3, r3, #4
 800047e:	4413      	add	r3, r2
 8000480:	3304      	adds	r3, #4
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff39 	bl	80002fc <delay>
		}

		// get new input
		input = *(GPIOA->IDR);
 800048a:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <main+0xa0>)
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	603b      	str	r3, [r7, #0]
		//input = (*GPIO_A_IDR & 0x07);

		// go to next state
		state = FSM[state].Next[input];
 8000492:	79fa      	ldrb	r2, [r7, #7]
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	4906      	ldr	r1, [pc, #24]	; (80004b0 <main+0x9c>)
 8000498:	0112      	lsls	r2, r2, #4
 800049a:	440a      	add	r2, r1
 800049c:	4413      	add	r3, r2
 800049e:	3308      	adds	r3, #8
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	71fb      	strb	r3, [r7, #7]
		*GPIOB->ODR = FSM[state].Output;
 80004a4:	e7d3      	b.n	800044e <main+0x3a>
 80004a6:	bf00      	nop
 80004a8:	20000000 	.word	0x20000000
 80004ac:	2000004c 	.word	0x2000004c
 80004b0:	0800056c 	.word	0x0800056c
 80004b4:	20000030 	.word	0x20000030

080004b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004b8:	480d      	ldr	r0, [pc, #52]	; (80004f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004bc:	f7ff fed8 	bl	8000270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c0:	480c      	ldr	r0, [pc, #48]	; (80004f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004c2:	490d      	ldr	r1, [pc, #52]	; (80004f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c4:	4a0d      	ldr	r2, [pc, #52]	; (80004fc <LoopForever+0xe>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c8:	e002      	b.n	80004d0 <LoopCopyDataInit>

080004ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ce:	3304      	adds	r3, #4

080004d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d4:	d3f9      	bcc.n	80004ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d6:	4a0a      	ldr	r2, [pc, #40]	; (8000500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d8:	4c0a      	ldr	r4, [pc, #40]	; (8000504 <LoopForever+0x16>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004dc:	e001      	b.n	80004e2 <LoopFillZerobss>

080004de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e0:	3204      	adds	r2, #4

080004e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e4:	d3fb      	bcc.n	80004de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004e6:	f000 f811 	bl	800050c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ea:	f7ff ff93 	bl	8000414 <main>

080004ee <LoopForever>:

LoopForever:
  b LoopForever
 80004ee:	e7fe      	b.n	80004ee <LoopForever>
  ldr   r0, =_estack
 80004f0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80004f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80004fc:	08000614 	.word	0x08000614
  ldr r2, =_sbss
 8000500:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000504:	20000088 	.word	0x20000088

08000508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000508:	e7fe      	b.n	8000508 <ADC1_2_IRQHandler>
	...

0800050c <__libc_init_array>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	2600      	movs	r6, #0
 8000510:	4d0c      	ldr	r5, [pc, #48]	; (8000544 <__libc_init_array+0x38>)
 8000512:	4c0d      	ldr	r4, [pc, #52]	; (8000548 <__libc_init_array+0x3c>)
 8000514:	1b64      	subs	r4, r4, r5
 8000516:	10a4      	asrs	r4, r4, #2
 8000518:	42a6      	cmp	r6, r4
 800051a:	d109      	bne.n	8000530 <__libc_init_array+0x24>
 800051c:	f000 f81a 	bl	8000554 <_init>
 8000520:	2600      	movs	r6, #0
 8000522:	4d0a      	ldr	r5, [pc, #40]	; (800054c <__libc_init_array+0x40>)
 8000524:	4c0a      	ldr	r4, [pc, #40]	; (8000550 <__libc_init_array+0x44>)
 8000526:	1b64      	subs	r4, r4, r5
 8000528:	10a4      	asrs	r4, r4, #2
 800052a:	42a6      	cmp	r6, r4
 800052c:	d105      	bne.n	800053a <__libc_init_array+0x2e>
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	f855 3b04 	ldr.w	r3, [r5], #4
 8000534:	4798      	blx	r3
 8000536:	3601      	adds	r6, #1
 8000538:	e7ee      	b.n	8000518 <__libc_init_array+0xc>
 800053a:	f855 3b04 	ldr.w	r3, [r5], #4
 800053e:	4798      	blx	r3
 8000540:	3601      	adds	r6, #1
 8000542:	e7f2      	b.n	800052a <__libc_init_array+0x1e>
 8000544:	0800060c 	.word	0x0800060c
 8000548:	0800060c 	.word	0x0800060c
 800054c:	0800060c 	.word	0x0800060c
 8000550:	08000610 	.word	0x08000610

08000554 <_init>:
 8000554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000556:	bf00      	nop
 8000558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055a:	bc08      	pop	{r3}
 800055c:	469e      	mov	lr, r3
 800055e:	4770      	bx	lr

08000560 <_fini>:
 8000560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000562:	bf00      	nop
 8000564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000566:	bc08      	pop	{r3}
 8000568:	469e      	mov	lr, r3
 800056a:	4770      	bx	lr
