#include "stm32f1xx.h"
#include "ssd1306.h"  // Include your I2C OLED library

// Wait time (*1ms)
#define GreenTime   8000    // 8s
#define WaitTime    2000    // 2s
#define RedTime     1000    // 1s
#define WalkGTime   5000    // 5s

volatile uint32_t TimeDelay = 0;
volatile uint32_t elapsed_time = 0;

void SysTick_Init(uint32_t ticks);
void flashing(uint32_t time);
void SysTick_Handler(void);
void Delay(uint32_t nTime);
void DisplayTime(void);

int main(void) {
    SystemInit();
    I2C_Init();  // Assuming you've implemented I2C_Init
    SysTick_Init(8000);
    SSD1306_Init();

    while (1) {
        // Your FSM logic here
        flashing(GreenTime);

        // Update the elapsed time in milliseconds
        DisplayTime();

        flashing(WaitTime);

        // Update the elapsed time in milliseconds
        DisplayTime();

        flashing(RedTime);

        // Update the elapsed time in milliseconds
        DisplayTime();

        flashing(WalkGTime);

        // Update the elapsed time in milliseconds
        DisplayTime();
    }
}

void flashing(uint32_t time) {
    time /= 8;
    int8_t repeatTime = 5;

    while (repeatTime--) {
        // Display the elapsed time on OLED
        DisplayTime();

        GPIOB->ODR |= 0x03;        // ensure the LED on
        GPIOB->ODR &= 0xFFFFFFFE;    // turn off white
        Delay(time);

        // Display the elapsed time on OLED
        DisplayTime();

        GPIOB->ODR |= 0x03;        // ensure the LED on
        GPIOB->ODR &= 0xFFFFFFFD;    // turn off red
        Delay(time);
    }
}

void DisplayTime(void) {
    // Increment the elapsed time in milliseconds
    elapsed_time++;

    // Display the elapsed time on OLED
    char timeString[16];
    sprintf(timeString, "Time: %lu ms", elapsed_time);

    SSD1306_Clear();
    SSD1306_GotoXY(0, 0);
    SSD1306_Puts(timeString, &Font_7x10, SSD1306_COLOR_WHITE);
    SSD1306_UpdateScreen();
}

void SysTick_Init(uint32_t ticks) {
    SysTick->CTRL = 0x00000000;    // SysTick_CTRL_DISABLE;
    SysTick->LOAD = ticks - 1;
    // set interrupt priority of SysTick to least urgency
    // Using NVIC_SetPriority for convenience, to focus on peripheral interrupt
    NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL);
    SysTick->VAL = 0;    // reset the value
    // select processor clock
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;  /* Enable SysTick IRQ and SysTick Timer */
}

void SysTick_Handler(void) {
    if (TimeDelay > 0)
        TimeDelay--;
}

void Delay(uint32_t nTime) {
    // nTime: specifies the delay time length
    TimeDelay = nTime;
    while (TimeDelay != 0)
        ;        // busy wait
}

void I2C_Init(void) {
    // Initialization code for I2C, as mentioned in the previous examples
    // ...
}