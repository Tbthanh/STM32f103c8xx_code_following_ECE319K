
Lab5_Traficlight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000258  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08000388  08000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000428  08000428  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08000428  08000428  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000428  08000428  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000428  08000428  00010428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800042c  0800042c  0001042c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08000430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000060  08000490  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08000490  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000003cc  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000015a  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  000205f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000003f  00000000  00000000  00020658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001073  00000000  00000000  00020697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005c2  00000000  00000000  0002170a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000041a2  00000000  00000000  00021ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000c4  00000000  00000000  00025e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00025f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000060 	.word	0x20000060
 800014c:	00000000 	.word	0x00000000
 8000150:	08000370 	.word	0x08000370

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000064 	.word	0x20000064
 800016c:	08000370 	.word	0x08000370

08000170 <portB_Init>:
	{0x090,RedTime,{rAl,jWa,jWe,jWe,jSo,jSo,jSo,jSo}}
};

// initialize port B 4-9 and B 0-1
void portB_Init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	// CRL for pin B 4-7 and 0-1
	*GPIOB->CRL |= 0x11110011;
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <portB_Init+0x30>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <portB_Init+0x30>)
 800017c:	6812      	ldr	r2, [r2, #0]
 800017e:	f043 5388 	orr.w	r3, r3, #285212672	; 0x11000000
 8000182:	f043 1311 	orr.w	r3, r3, #1114129	; 0x110011
 8000186:	6013      	str	r3, [r2, #0]
	// CLH for pin B 8-9
	*GPIOB->CRH |= 0x00000011;
 8000188:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <portB_Init+0x30>)
 800018a:	685b      	ldr	r3, [r3, #4]
 800018c:	681a      	ldr	r2, [r3, #0]
 800018e:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <portB_Init+0x30>)
 8000190:	685b      	ldr	r3, [r3, #4]
 8000192:	f042 0211 	orr.w	r2, r2, #17
 8000196:	601a      	str	r2, [r3, #0]
	// Optional for clearing / setting the LED
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	20000044 	.word	0x20000044

080001a4 <portA_Init>:

// initialize port A 0-2
void portA_Init(void)
{
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
	// CRL for pin A 0-2
	*GPIOA->CRL |= (uint32_t)0x00000088;
 80001a8:	4b09      	ldr	r3, [pc, #36]	; (80001d0 <portA_Init+0x2c>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	681a      	ldr	r2, [r3, #0]
 80001ae:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <portA_Init+0x2c>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	f042 0288 	orr.w	r2, r2, #136	; 0x88
 80001b6:	601a      	str	r2, [r3, #0]
	// Pull up pin A 0-2
	*GPIOA->ODR |= (uint32_t)0x00000003;
 80001b8:	4b05      	ldr	r3, [pc, #20]	; (80001d0 <portA_Init+0x2c>)
 80001ba:	68db      	ldr	r3, [r3, #12]
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <portA_Init+0x2c>)
 80001c0:	68db      	ldr	r3, [r3, #12]
 80001c2:	f042 0203 	orr.w	r2, r2, #3
 80001c6:	601a      	str	r2, [r3, #0]
}
 80001c8:	bf00      	nop
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	20000028 	.word	0x20000028

080001d4 <flashing>:

// function for flashing walking light 4 times B0-1
void flashing(uint32_t time)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	time /= 8;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	08db      	lsrs	r3, r3, #3
 80001e0:	607b      	str	r3, [r7, #4]
	int8_t count = 5;
 80001e2:	2305      	movs	r3, #5
 80001e4:	73fb      	strb	r3, [r7, #15]
	while(count--)
 80001e6:	e01f      	b.n	8000228 <flashing+0x54>
	{
		*GPIOB->ODR |= 0x03;		// ensure the led on
 80001e8:	4b16      	ldr	r3, [pc, #88]	; (8000244 <flashing+0x70>)
 80001ea:	68db      	ldr	r3, [r3, #12]
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	4b15      	ldr	r3, [pc, #84]	; (8000244 <flashing+0x70>)
 80001f0:	68db      	ldr	r3, [r3, #12]
 80001f2:	f042 0203 	orr.w	r2, r2, #3
 80001f6:	601a      	str	r2, [r3, #0]
		*GPIOB->ODR &= 0xFFFFFFFE;	// turn off white
 80001f8:	4b12      	ldr	r3, [pc, #72]	; (8000244 <flashing+0x70>)
 80001fa:	68db      	ldr	r3, [r3, #12]
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	4b11      	ldr	r3, [pc, #68]	; (8000244 <flashing+0x70>)
 8000200:	68db      	ldr	r3, [r3, #12]
 8000202:	f022 0201 	bic.w	r2, r2, #1
 8000206:	601a      	str	r2, [r3, #0]
		//SysTick_Wait10ms(time);		// delay
		*GPIOB->ODR |= 0x03;		// ensure the led on
 8000208:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <flashing+0x70>)
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <flashing+0x70>)
 8000210:	68db      	ldr	r3, [r3, #12]
 8000212:	f042 0203 	orr.w	r2, r2, #3
 8000216:	601a      	str	r2, [r3, #0]
		*GPIOB->ODR &= 0xFFFFFFFD;	// turn off red
 8000218:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <flashing+0x70>)
 800021a:	68db      	ldr	r3, [r3, #12]
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	4b09      	ldr	r3, [pc, #36]	; (8000244 <flashing+0x70>)
 8000220:	68db      	ldr	r3, [r3, #12]
 8000222:	f022 0202 	bic.w	r2, r2, #2
 8000226:	601a      	str	r2, [r3, #0]
	while(count--)
 8000228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800022c:	b2da      	uxtb	r2, r3
 800022e:	3a01      	subs	r2, #1
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	73fa      	strb	r2, [r7, #15]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d1d7      	bne.n	80001e8 <flashing+0x14>
		//SysTick_Wait10ms(time);		//delay
	}
}
 8000238:	bf00      	nop
 800023a:	bf00      	nop
 800023c:	3714      	adds	r7, #20
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	20000044 	.word	0x20000044

08000248 <main>:

int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
	// initialize 72 MHz system clock
	//PLL_Init(Bus80MHz);

	// Enable RCC for GPIO
	*RCC->APB2ENR |= 0x0C;
 800024e:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <main+0x7c>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	4b1b      	ldr	r3, [pc, #108]	; (80002c4 <main+0x7c>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	f042 020c 	orr.w	r2, r2, #12
 800025c:	601a      	str	r2, [r3, #0]

	// Give time to stabilize the clock
	while(0 == (*RCC->APB2ENR & 0x0C)){}
 800025e:	bf00      	nop
 8000260:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <main+0x7c>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f003 030c 	and.w	r3, r3, #12
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f8      	beq.n	8000260 <main+0x18>

	// Initialize GPIOs
	portA_Init();
 800026e:	f7ff ff99 	bl	80001a4 <portA_Init>
	portB_Init();
 8000272:	f7ff ff7d 	bl	8000170 <portB_Init>

	// Initial state: red All
	uint8_t state = rAl;
 8000276:	2309      	movs	r3, #9
 8000278:	71fb      	strb	r3, [r7, #7]

	// Input
	volatile uint32_t input = 0x00;
 800027a:	2300      	movs	r3, #0
 800027c:	603b      	str	r3, [r7, #0]

    /* Loop forever */
	for(;;)
	{
		// set the output to the current state
		*GPIOB->ODR = FSM[state].Output;
 800027e:	79fa      	ldrb	r2, [r7, #7]
 8000280:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <main+0x80>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	4911      	ldr	r1, [pc, #68]	; (80002cc <main+0x84>)
 8000286:	0112      	lsls	r2, r2, #4
 8000288:	440a      	add	r2, r1
 800028a:	6812      	ldr	r2, [r2, #0]
 800028c:	601a      	str	r2, [r3, #0]

		// check if wWa
		if (state == wWa)
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	2b07      	cmp	r3, #7
 8000292:	d108      	bne.n	80002a6 <main+0x5e>
		{
			// flash white-red-off
			flashing(FSM[state].Time);
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	4a0d      	ldr	r2, [pc, #52]	; (80002cc <main+0x84>)
 8000298:	011b      	lsls	r3, r3, #4
 800029a:	4413      	add	r3, r2
 800029c:	3304      	adds	r3, #4
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4618      	mov	r0, r3
 80002a2:	f7ff ff97 	bl	80001d4 <flashing>
			// delay 10ms * FSM[state].Time
			//SysTick_Wait10ms(FSM[n].Time);
		}

		// get new input
		input = *GPIOA->IDR;
 80002a6:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <main+0x88>)
 80002a8:	689b      	ldr	r3, [r3, #8]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	603b      	str	r3, [r7, #0]
		//input = (*GPIO_A_IDR & 0x07);

		// go to next state
		state = FSM[state].Next[input];
 80002ae:	79fa      	ldrb	r2, [r7, #7]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	4906      	ldr	r1, [pc, #24]	; (80002cc <main+0x84>)
 80002b4:	0112      	lsls	r2, r2, #4
 80002b6:	440a      	add	r2, r1
 80002b8:	4413      	add	r3, r2
 80002ba:	3308      	adds	r3, #8
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	71fb      	strb	r3, [r7, #7]
		*GPIOB->ODR = FSM[state].Output;
 80002c0:	e7dd      	b.n	800027e <main+0x36>
 80002c2:	bf00      	nop
 80002c4:	20000000 	.word	0x20000000
 80002c8:	20000044 	.word	0x20000044
 80002cc:	08000388 	.word	0x08000388
 80002d0:	20000028 	.word	0x20000028

080002d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d4:	480d      	ldr	r0, [pc, #52]	; (800030c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002dc:	480c      	ldr	r0, [pc, #48]	; (8000310 <LoopForever+0x6>)
  ldr r1, =_edata
 80002de:	490d      	ldr	r1, [pc, #52]	; (8000314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e0:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <LoopForever+0xe>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e4:	e002      	b.n	80002ec <LoopCopyDataInit>

080002e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ea:	3304      	adds	r3, #4

080002ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f0:	d3f9      	bcc.n	80002e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f2:	4a0a      	ldr	r2, [pc, #40]	; (800031c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f4:	4c0a      	ldr	r4, [pc, #40]	; (8000320 <LoopForever+0x16>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f8:	e001      	b.n	80002fe <LoopFillZerobss>

080002fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002fc:	3204      	adds	r2, #4

080002fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000300:	d3fb      	bcc.n	80002fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000302:	f000 f811 	bl	8000328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000306:	f7ff ff9f 	bl	8000248 <main>

0800030a <LoopForever>:

LoopForever:
  b LoopForever
 800030a:	e7fe      	b.n	800030a <LoopForever>
  ldr   r0, =_estack
 800030c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000314:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000318:	08000430 	.word	0x08000430
  ldr r2, =_sbss
 800031c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000320:	2000007c 	.word	0x2000007c

08000324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000324:	e7fe      	b.n	8000324 <ADC1_2_IRQHandler>
	...

08000328 <__libc_init_array>:
 8000328:	b570      	push	{r4, r5, r6, lr}
 800032a:	2600      	movs	r6, #0
 800032c:	4d0c      	ldr	r5, [pc, #48]	; (8000360 <__libc_init_array+0x38>)
 800032e:	4c0d      	ldr	r4, [pc, #52]	; (8000364 <__libc_init_array+0x3c>)
 8000330:	1b64      	subs	r4, r4, r5
 8000332:	10a4      	asrs	r4, r4, #2
 8000334:	42a6      	cmp	r6, r4
 8000336:	d109      	bne.n	800034c <__libc_init_array+0x24>
 8000338:	f000 f81a 	bl	8000370 <_init>
 800033c:	2600      	movs	r6, #0
 800033e:	4d0a      	ldr	r5, [pc, #40]	; (8000368 <__libc_init_array+0x40>)
 8000340:	4c0a      	ldr	r4, [pc, #40]	; (800036c <__libc_init_array+0x44>)
 8000342:	1b64      	subs	r4, r4, r5
 8000344:	10a4      	asrs	r4, r4, #2
 8000346:	42a6      	cmp	r6, r4
 8000348:	d105      	bne.n	8000356 <__libc_init_array+0x2e>
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000350:	4798      	blx	r3
 8000352:	3601      	adds	r6, #1
 8000354:	e7ee      	b.n	8000334 <__libc_init_array+0xc>
 8000356:	f855 3b04 	ldr.w	r3, [r5], #4
 800035a:	4798      	blx	r3
 800035c:	3601      	adds	r6, #1
 800035e:	e7f2      	b.n	8000346 <__libc_init_array+0x1e>
 8000360:	08000428 	.word	0x08000428
 8000364:	08000428 	.word	0x08000428
 8000368:	08000428 	.word	0x08000428
 800036c:	0800042c 	.word	0x0800042c

08000370 <_init>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr

0800037c <_fini>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr
