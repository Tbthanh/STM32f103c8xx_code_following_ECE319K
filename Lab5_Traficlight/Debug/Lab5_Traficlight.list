
Lab5_Traficlight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003cc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080004fc  080004fc  000104fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800059c  0800059c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800059c  0800059c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800059c  0800059c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800059c  0800059c  0001059c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005a0  080005a0  000105a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080005a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000060  08000604  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08000604  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000042a  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000189  00000000  00000000  000204f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00020680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004c  00000000  00000000  000206f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010a6  00000000  00000000  0002073c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000071b  00000000  00000000  000217e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000429a  00000000  00000000  00021efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000108  00000000  00000000  00026198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000262a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000060 	.word	0x20000060
 800014c:	00000000 	.word	0x00000000
 8000150:	080004e4 	.word	0x080004e4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000064 	.word	0x20000064
 800016c:	080004e4 	.word	0x080004e4

08000170 <SetSysClock>:
  *         Original code's link: https://github.com/Seeed-Studio/MotorBridgeCapeFirmwareSourceCode/blob/master/STM32F0xx_StdPeriph_Lib_V1.5.0/Projects/STM32F0xx_StdPeriph_Examples/RCC/RCC_Example/system_stm32f0xx.c
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	2300      	movs	r3, #0
 800017c:	603b      	str	r3, [r7, #0]
	/*            PLL (clocked by HSE) used as System clock source                */
	/******************************************************************************/

	/* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
	/* Enable HSE */
	*(RCC->CR) |= ((uint32_t)RCC_CR_HSEON);
 800017e:	4b3a      	ldr	r3, [pc, #232]	; (8000268 <SetSysClock+0xf8>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b38      	ldr	r3, [pc, #224]	; (8000268 <SetSysClock+0xf8>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800018c:	601a      	str	r2, [r3, #0]

	/* Wait till HSE is ready and if Time out is reached exit */
	do
	{
		HSEStatus = *(RCC->CR) & RCC_CR_HSERDY;
 800018e:	4b36      	ldr	r3, [pc, #216]	; (8000268 <SetSysClock+0xf8>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b35      	ldr	r3, [pc, #212]	; (800026c <SetSysClock+0xfc>)
 8000196:	4013      	ands	r3, r2
 8000198:	603b      	str	r3, [r7, #0]
		StartUpCounter++;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	3301      	adds	r3, #1
 800019e:	607b      	str	r3, [r7, #4]
	} while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d103      	bne.n	80001ae <SetSysClock+0x3e>
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80001ac:	d1ef      	bne.n	800018e <SetSysClock+0x1e>

	if ((*(RCC->CR) & RCC_CR_HSERDY) != RCC_CR_RESET)
 80001ae:	4b2e      	ldr	r3, [pc, #184]	; (8000268 <SetSysClock+0xf8>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	4b2d      	ldr	r3, [pc, #180]	; (800026c <SetSysClock+0xfc>)
 80001b6:	4013      	ands	r3, r2
 80001b8:	2b83      	cmp	r3, #131	; 0x83
 80001ba:	d002      	beq.n	80001c2 <SetSysClock+0x52>
	{
		HSEStatus = (uint32_t)0x01;
 80001bc:	2301      	movs	r3, #1
 80001be:	603b      	str	r3, [r7, #0]
 80001c0:	e001      	b.n	80001c6 <SetSysClock+0x56>
	}
	else
	{
		HSEStatus = (uint32_t)0x00;
 80001c2:	2300      	movs	r3, #0
 80001c4:	603b      	str	r3, [r7, #0]
	}

	if (HSEStatus == (uint32_t)0x01)
 80001c6:	683b      	ldr	r3, [r7, #0]
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d147      	bne.n	800025c <SetSysClock+0xec>
		// Skip this because not truly understand
		/* Enable Prefetch Buffer and set Flash Latency */
		//FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;

		/* HCLK = SYSCLK */
		*(RCC->CFGR) |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80001cc:	4b26      	ldr	r3, [pc, #152]	; (8000268 <SetSysClock+0xf8>)
 80001ce:	685b      	ldr	r3, [r3, #4]
 80001d0:	681a      	ldr	r2, [r3, #0]
 80001d2:	4b25      	ldr	r3, [pc, #148]	; (8000268 <SetSysClock+0xf8>)
 80001d4:	685b      	ldr	r3, [r3, #4]
 80001d6:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80001da:	601a      	str	r2, [r3, #0]

		/* PCLK = HCLK */
		*(RCC->CFGR) |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 80001dc:	4b22      	ldr	r3, [pc, #136]	; (8000268 <SetSysClock+0xf8>)
 80001de:	685b      	ldr	r3, [r3, #4]
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	4b21      	ldr	r3, [pc, #132]	; (8000268 <SetSysClock+0xf8>)
 80001e4:	685b      	ldr	r3, [r3, #4]
 80001e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80001ea:	601a      	str	r2, [r3, #0]

		/* PLL configuration */
		// Clear bits
		*(RCC->CFGR) &= (uint32_t)((uint32_t)~0x003F0000);
 80001ec:	4b1e      	ldr	r3, [pc, #120]	; (8000268 <SetSysClock+0xf8>)
 80001ee:	685b      	ldr	r3, [r3, #4]
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	4b1d      	ldr	r3, [pc, #116]	; (8000268 <SetSysClock+0xf8>)
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80001fa:	601a      	str	r2, [r3, #0]
		//*(RCC->CFGR) &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
		// Set bits
		*(RCC->CFGR) |= (uint32_t)(0x00110000);
 80001fc:	4b1a      	ldr	r3, [pc, #104]	; (8000268 <SetSysClock+0xf8>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	4b19      	ldr	r3, [pc, #100]	; (8000268 <SetSysClock+0xf8>)
 8000204:	685b      	ldr	r3, [r3, #4]
 8000206:	f442 1288 	orr.w	r2, r2, #1114112	; 0x110000
 800020a:	601a      	str	r2, [r3, #0]
		//*(RCC->CFGR) |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);

		/* Enable PLL */
		//*(RCC->CR) |= RCC_CR_PLLON;
		*(RCC->CR) |= (uint32_t)0x01000000;
 800020c:	4b16      	ldr	r3, [pc, #88]	; (8000268 <SetSysClock+0xf8>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	4b15      	ldr	r3, [pc, #84]	; (8000268 <SetSysClock+0xf8>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800021a:	601a      	str	r2, [r3, #0]

		/* Wait till PLL is ready */
		while((*(RCC->CR) & RCC_CR_PLLRDY) == 0)
 800021c:	bf00      	nop
 800021e:	4b12      	ldr	r3, [pc, #72]	; (8000268 <SetSysClock+0xf8>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b12      	ldr	r3, [pc, #72]	; (8000270 <SetSysClock+0x100>)
 8000226:	4013      	ands	r3, r2
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0f8      	beq.n	800021e <SetSysClock+0xae>
		{
		}

		/* Select PLL as system clock source */
		//*(RCC->CFGR) &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
		*(RCC->CFGR) &= (uint32_t)((uint32_t)~(0x00000003));
 800022c:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <SetSysClock+0xf8>)
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <SetSysClock+0xf8>)
 8000234:	685b      	ldr	r3, [r3, #4]
 8000236:	f022 0203 	bic.w	r2, r2, #3
 800023a:	601a      	str	r2, [r3, #0]
		//*(RCC->CFGR) |= (uint32_t)RCC_CFGR_SW_PLL;
		*(RCC->CFGR) |= (uint32_t)0x00000002;
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <SetSysClock+0xf8>)
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b09      	ldr	r3, [pc, #36]	; (8000268 <SetSysClock+0xf8>)
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	f042 0202 	orr.w	r2, r2, #2
 800024a:	601a      	str	r2, [r3, #0]

		/* Wait till PLL is used as system clock source */
		while ((*(RCC->CFGR) & (uint32_t)0x0000000C) != (uint32_t)0x00000008)
 800024c:	bf00      	nop
 800024e:	4b06      	ldr	r3, [pc, #24]	; (8000268 <SetSysClock+0xf8>)
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f003 030c 	and.w	r3, r3, #12
 8000258:	2b08      	cmp	r3, #8
 800025a:	d1f8      	bne.n	800024e <SetSysClock+0xde>
	}
	else
	{ /* If HSE fails to start-up, the application will have wrong clock
	 configuration. User can add here some code to deal with this error */
	}
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20000000 	.word	0x20000000
 800026c:	00020083 	.word	0x00020083
 8000270:	02000083 	.word	0x02000083

08000274 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	/* Set HSION bit */
	*(RCC->CR) |= (uint32_t)0x00000001;
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <SystemInit+0x68>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	4b17      	ldr	r3, [pc, #92]	; (80002dc <SystemInit+0x68>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f042 0201 	orr.w	r2, r2, #1
 8000286:	601a      	str	r2, [r3, #0]

	/* Reset SW[1:0], HPRE[3:0], PPRE[2:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
	//RCC->CFGR &= (uint32_t)0xF8FFB80C;
	*(RCC->CFGR) &= (uint32_t)0xF8FFC00C;	// also reset PPRE2[2:0]
 8000288:	4b14      	ldr	r3, [pc, #80]	; (80002dc <SystemInit+0x68>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	6819      	ldr	r1, [r3, #0]
 800028e:	4b13      	ldr	r3, [pc, #76]	; (80002dc <SystemInit+0x68>)
 8000290:	685a      	ldr	r2, [r3, #4]
 8000292:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <SystemInit+0x6c>)
 8000294:	400b      	ands	r3, r1
 8000296:	6013      	str	r3, [r2, #0]

	/* Reset HSEON, CSSON and PLLON bits */
	*(RCC->CR) &= (uint32_t)0xFEF6FFFF;
 8000298:	4b10      	ldr	r3, [pc, #64]	; (80002dc <SystemInit+0x68>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a0f      	ldr	r2, [pc, #60]	; (80002dc <SystemInit+0x68>)
 80002a0:	6812      	ldr	r2, [r2, #0]
 80002a2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002aa:	6013      	str	r3, [r2, #0]

	/* Reset HSEBYP bit */
	*(RCC->CR) &= (uint32_t)0xFFFBFFFF;
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <SystemInit+0x68>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <SystemInit+0x68>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80002ba:	601a      	str	r2, [r3, #0]

	/* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
	*(RCC->CFGR) &= (uint32_t)0xFFC0FFFF;
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <SystemInit+0x68>)
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <SystemInit+0x68>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80002ca:	601a      	str	r2, [r3, #0]

	/* Reset HSI14 bit */
	//RCC->CR2 &= (uint32_t)0xFFFFFFFE;

	/* Disable all interrupts */
	*(RCC->CIR) = 0x00000000;
 80002cc:	4b03      	ldr	r3, [pc, #12]	; (80002dc <SystemInit+0x68>)
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]

	/* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
	SetSysClock();
 80002d4:	f7ff ff4c 	bl	8000170 <SetSysClock>
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000000 	.word	0x20000000
 80002e0:	f8ffc00c 	.word	0xf8ffc00c

080002e4 <portB_Init>:
	{0x090,RedTime,{rAl,jWa,jWe,jWe,jSo,jSo,jSo,jSo}}
};

// initialize port B 4-9 and B 0-1
void portB_Init(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
	// CRL for pin B 4-7 and 0-1
	*(GPIOB->CRL) |= 0x11110011;
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <portB_Init+0x30>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a09      	ldr	r2, [pc, #36]	; (8000314 <portB_Init+0x30>)
 80002f0:	6812      	ldr	r2, [r2, #0]
 80002f2:	f043 5388 	orr.w	r3, r3, #285212672	; 0x11000000
 80002f6:	f043 1311 	orr.w	r3, r3, #1114129	; 0x110011
 80002fa:	6013      	str	r3, [r2, #0]
	// CLH for pin B 8-9
	*(GPIOB->CRH) |= 0x00000011;
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <portB_Init+0x30>)
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	4b04      	ldr	r3, [pc, #16]	; (8000314 <portB_Init+0x30>)
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	f042 0211 	orr.w	r2, r2, #17
 800030a:	601a      	str	r2, [r3, #0]
	// Optional for clearing / setting the LED
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	20000044 	.word	0x20000044

08000318 <portA_Init>:

// initialize port A 0-2
void portA_Init(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	// CRL for pin A 0-2
	*(GPIOA->CRL) |= (uint32_t)0x00000088;
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <portA_Init+0x2c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <portA_Init+0x2c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f042 0288 	orr.w	r2, r2, #136	; 0x88
 800032a:	601a      	str	r2, [r3, #0]
	// Pull up pin A 0-2
	*(GPIOA->ODR) |= (uint32_t)0x00000003;
 800032c:	4b05      	ldr	r3, [pc, #20]	; (8000344 <portA_Init+0x2c>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	4b04      	ldr	r3, [pc, #16]	; (8000344 <portA_Init+0x2c>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	f042 0203 	orr.w	r2, r2, #3
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	20000028 	.word	0x20000028

08000348 <flashing>:

// function for flashing walking light 4 times B0-1
void flashing(uint32_t time)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	time /= 8;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	08db      	lsrs	r3, r3, #3
 8000354:	607b      	str	r3, [r7, #4]
	int8_t count = 5;
 8000356:	2305      	movs	r3, #5
 8000358:	73fb      	strb	r3, [r7, #15]
	while(count--)
 800035a:	e01f      	b.n	800039c <flashing+0x54>
	{
		*(GPIOB->ODR) |= 0x03;		// ensure the led on
 800035c:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <flashing+0x70>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <flashing+0x70>)
 8000364:	68db      	ldr	r3, [r3, #12]
 8000366:	f042 0203 	orr.w	r2, r2, #3
 800036a:	601a      	str	r2, [r3, #0]
		*(GPIOB->ODR) &= 0xFFFFFFFE;	// turn off white
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <flashing+0x70>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <flashing+0x70>)
 8000374:	68db      	ldr	r3, [r3, #12]
 8000376:	f022 0201 	bic.w	r2, r2, #1
 800037a:	601a      	str	r2, [r3, #0]
		//SysTick_Wait10ms(time);		// delay
		*(GPIOB->ODR) |= 0x03;		// ensure the led on
 800037c:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <flashing+0x70>)
 800037e:	68db      	ldr	r3, [r3, #12]
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <flashing+0x70>)
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	f042 0203 	orr.w	r2, r2, #3
 800038a:	601a      	str	r2, [r3, #0]
		*(GPIOB->ODR) &= 0xFFFFFFFD;	// turn off red
 800038c:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <flashing+0x70>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <flashing+0x70>)
 8000394:	68db      	ldr	r3, [r3, #12]
 8000396:	f022 0202 	bic.w	r2, r2, #2
 800039a:	601a      	str	r2, [r3, #0]
	while(count--)
 800039c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	3a01      	subs	r2, #1
 80003a4:	b2d2      	uxtb	r2, r2
 80003a6:	73fa      	strb	r2, [r7, #15]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d1d7      	bne.n	800035c <flashing+0x14>
		//SysTick_Wait10ms(time);		//delay
	}
}
 80003ac:	bf00      	nop
 80003ae:	bf00      	nop
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	20000044 	.word	0x20000044

080003bc <main>:

int main(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
	// initialize 72 MHz system clock
	//PLL_Init(Bus80MHz);

	// Enable RCC for GPIO
	*(RCC->APB2ENR) |= 0x0C;
 80003c2:	4b1d      	ldr	r3, [pc, #116]	; (8000438 <main+0x7c>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <main+0x7c>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f042 020c 	orr.w	r2, r2, #12
 80003d0:	601a      	str	r2, [r3, #0]

	// Give time to stabilize the clock
	while(0 == (*(RCC->APB2ENR) & 0x0C)){}
 80003d2:	bf00      	nop
 80003d4:	4b18      	ldr	r3, [pc, #96]	; (8000438 <main+0x7c>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f003 030c 	and.w	r3, r3, #12
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d0f8      	beq.n	80003d4 <main+0x18>

	// Initialize GPIOs
	portA_Init();
 80003e2:	f7ff ff99 	bl	8000318 <portA_Init>
	portB_Init();
 80003e6:	f7ff ff7d 	bl	80002e4 <portB_Init>

	// Initial state: red All
	uint8_t state = rAl;
 80003ea:	2309      	movs	r3, #9
 80003ec:	71fb      	strb	r3, [r7, #7]

	// Input
	volatile uint32_t input = 0x00;
 80003ee:	2300      	movs	r3, #0
 80003f0:	603b      	str	r3, [r7, #0]

    /* Loop forever */
	for(;;)
	{
		// set the output to the current state
		*GPIOB->ODR = FSM[state].Output;
 80003f2:	79fa      	ldrb	r2, [r7, #7]
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <main+0x80>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	4911      	ldr	r1, [pc, #68]	; (8000440 <main+0x84>)
 80003fa:	0112      	lsls	r2, r2, #4
 80003fc:	440a      	add	r2, r1
 80003fe:	6812      	ldr	r2, [r2, #0]
 8000400:	601a      	str	r2, [r3, #0]

		// check if wWa
		if (state == wWa)
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	2b07      	cmp	r3, #7
 8000406:	d108      	bne.n	800041a <main+0x5e>
		{
			// flash white-red-off
			flashing(FSM[state].Time);
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	4a0d      	ldr	r2, [pc, #52]	; (8000440 <main+0x84>)
 800040c:	011b      	lsls	r3, r3, #4
 800040e:	4413      	add	r3, r2
 8000410:	3304      	adds	r3, #4
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff ff97 	bl	8000348 <flashing>
			// delay 10ms * FSM[state].Time
			//SysTick_Wait10ms(FSM[n].Time);
		}

		// get new input
		input = *(GPIOA->IDR);
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <main+0x88>)
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	603b      	str	r3, [r7, #0]
		//input = (*GPIO_A_IDR & 0x07);

		// go to next state
		state = FSM[state].Next[input];
 8000422:	79fa      	ldrb	r2, [r7, #7]
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	4906      	ldr	r1, [pc, #24]	; (8000440 <main+0x84>)
 8000428:	0112      	lsls	r2, r2, #4
 800042a:	440a      	add	r2, r1
 800042c:	4413      	add	r3, r2
 800042e:	3308      	adds	r3, #8
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	71fb      	strb	r3, [r7, #7]
		*GPIOB->ODR = FSM[state].Output;
 8000434:	e7dd      	b.n	80003f2 <main+0x36>
 8000436:	bf00      	nop
 8000438:	20000000 	.word	0x20000000
 800043c:	20000044 	.word	0x20000044
 8000440:	080004fc 	.word	0x080004fc
 8000444:	20000028 	.word	0x20000028

08000448 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000448:	480d      	ldr	r0, [pc, #52]	; (8000480 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800044a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800044c:	f7ff ff12 	bl	8000274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000450:	480c      	ldr	r0, [pc, #48]	; (8000484 <LoopForever+0x6>)
  ldr r1, =_edata
 8000452:	490d      	ldr	r1, [pc, #52]	; (8000488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000454:	4a0d      	ldr	r2, [pc, #52]	; (800048c <LoopForever+0xe>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000458:	e002      	b.n	8000460 <LoopCopyDataInit>

0800045a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800045c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045e:	3304      	adds	r3, #4

08000460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000464:	d3f9      	bcc.n	800045a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000466:	4a0a      	ldr	r2, [pc, #40]	; (8000490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000468:	4c0a      	ldr	r4, [pc, #40]	; (8000494 <LoopForever+0x16>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800046c:	e001      	b.n	8000472 <LoopFillZerobss>

0800046e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000470:	3204      	adds	r2, #4

08000472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000474:	d3fb      	bcc.n	800046e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000476:	f000 f811 	bl	800049c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047a:	f7ff ff9f 	bl	80003bc <main>

0800047e <LoopForever>:

LoopForever:
  b LoopForever
 800047e:	e7fe      	b.n	800047e <LoopForever>
  ldr   r0, =_estack
 8000480:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000488:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800048c:	080005a4 	.word	0x080005a4
  ldr r2, =_sbss
 8000490:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000494:	2000007c 	.word	0x2000007c

08000498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000498:	e7fe      	b.n	8000498 <ADC1_2_IRQHandler>
	...

0800049c <__libc_init_array>:
 800049c:	b570      	push	{r4, r5, r6, lr}
 800049e:	2600      	movs	r6, #0
 80004a0:	4d0c      	ldr	r5, [pc, #48]	; (80004d4 <__libc_init_array+0x38>)
 80004a2:	4c0d      	ldr	r4, [pc, #52]	; (80004d8 <__libc_init_array+0x3c>)
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	10a4      	asrs	r4, r4, #2
 80004a8:	42a6      	cmp	r6, r4
 80004aa:	d109      	bne.n	80004c0 <__libc_init_array+0x24>
 80004ac:	f000 f81a 	bl	80004e4 <_init>
 80004b0:	2600      	movs	r6, #0
 80004b2:	4d0a      	ldr	r5, [pc, #40]	; (80004dc <__libc_init_array+0x40>)
 80004b4:	4c0a      	ldr	r4, [pc, #40]	; (80004e0 <__libc_init_array+0x44>)
 80004b6:	1b64      	subs	r4, r4, r5
 80004b8:	10a4      	asrs	r4, r4, #2
 80004ba:	42a6      	cmp	r6, r4
 80004bc:	d105      	bne.n	80004ca <__libc_init_array+0x2e>
 80004be:	bd70      	pop	{r4, r5, r6, pc}
 80004c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c4:	4798      	blx	r3
 80004c6:	3601      	adds	r6, #1
 80004c8:	e7ee      	b.n	80004a8 <__libc_init_array+0xc>
 80004ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ce:	4798      	blx	r3
 80004d0:	3601      	adds	r6, #1
 80004d2:	e7f2      	b.n	80004ba <__libc_init_array+0x1e>
 80004d4:	0800059c 	.word	0x0800059c
 80004d8:	0800059c 	.word	0x0800059c
 80004dc:	0800059c 	.word	0x0800059c
 80004e0:	080005a0 	.word	0x080005a0

080004e4 <_init>:
 80004e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e6:	bf00      	nop
 80004e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ea:	bc08      	pop	{r3}
 80004ec:	469e      	mov	lr, r3
 80004ee:	4770      	bx	lr

080004f0 <_fini>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	bf00      	nop
 80004f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f6:	bc08      	pop	{r3}
 80004f8:	469e      	mov	lr, r3
 80004fa:	4770      	bx	lr
