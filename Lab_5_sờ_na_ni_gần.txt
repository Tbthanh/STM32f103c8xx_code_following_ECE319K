Lab 5 sờ na ni gần
link: https://docs.google.com/document/d/1MDt8CCzsURqnGKx14CS1Sp-d_kqAHxbYl89t-8SYL1I/edit?usp=sharing

SPEC, tổng quan hệ thống:
	Input - đờ vờ:
		-South sensor (cảm biến Nam) (logic dương) mô phỏng bằng nút, ấn và giữ cho đến khi đường phía Nam không còn xe
		-West sensor (cảm biến Tây) (logic dương) như South sensor
		-Pedestrian sensor (logic dương) như hai  nút kia

	Output - đờ rờ: tổng có 9 output
		-R/G/B x 2 = 6 cho hai đường xe chạy, để tránh tai nạn thì  nên có  một khoảng tất cả đường toàn đỏ khi một đường chuyển sang vàng và một đường chuyển sang xanh.
		- Đèn led 3 màu cho walk light: chuyển trắng khi được đi, có 3 chế độ/ điều kiện như sau:
			(1) Đi bộ: Đèn walk trắng, hai đèn kia đỏ
			(2) Cảnh báo: nháy đỏ hai lần để báo hiệu nhanh cái chân lên, tự định thời gian nháy đỏ, nên có thời điểm tất cả đèn đỏ hết để chuyển quyền di chuyển cho làn khác.
			(3) Méo được đi: đỏ và đỏ

	Light sequence - trình tự bật sáng:
		-Nếu không có đèn: hệ thống sẽ được đặt trong mô hình an toàn:
			+Một đường xanh,  đường còn lại và đi bộ đỏ lòm
			+Đi bộ okie phần còn lại đỏ lòm
		-Chọn trình tự bật sáng nếu cả 3 input dương là 
			So-We-Wa-So-We-Wa
		-Chú ý một số điều kiện dừng tất ví dụ như
			+Giữa đèn vàng và đèn xanh đường khác
			+Giữa đèn vàng và đi bộ
			+Giữa đi bộ và đèn xanh
		- Một số trường hợp có thể gây khó hiểu:
			+

Thiết kế Fát Sấp Mặt:
	Đoã xong, quá ghê gớm.

SysTick:
	https://youtu.be/aLCUDv_fgoU?si=fMm2bMp-1QTNWgd8

	systick interupt time preriod = (systick_load + 1) x clock_preriod

Interupt:
	-ref:
		>> https://youtu.be/K0vmH2YGbOY?si=Mxo6ZwAjz_XwiJnd
		>> page 120/156 PM0056	
	-Về phần systick thì sẽ dùng của thư viện cmsis cho nhanh (sẽ cố config tay sau):
		Enable: systick sẽ được enable bởi chính 
	-Phần interupt chính sẽ trọng tâm vào interupt cho GPIO A cho chân:
		All peripheral (include GPIO) interupt: IRQn >= 0
		1.Enable interupt:
			NVIC_ISERx: register for enabling
			NVIC_ICERx: register for disabling 
			Method to enable:
				Method 1:
					Using NVIC_EnableIRQ(IRQn) and NVIC_DisableIRQ(IRQn)
				Method 2:
					Using the register and flip the coresponding bits:
						Enable:
							NVIC->ISER[IRQn >> 5] = 1 << (IRQn & 0x1F);

							/* using better solution is to shift bit and bitwise (the other is to / and %)
							Here's a breakdown of each part:

							NVIC: This typically represents the Nested Vectored Interrupt Controller, which is a hardware component in ARM Cortex-M microcontrollers responsible for managing interrupts.

							ISER[IRQn >> 5]: This refers to the Interrupt Set Enable Register (ISER) for a specific interrupt. IRQn is an interrupt number, and >> 5 is a bitwise right shift by 5. In ARM Cortex-M architectures, the ISER is an array of 32-bit registers, and each register can enable/disable up to 32 interrupts. The >> 5 operation is equivalent to dividing IRQn by 32 to find the index of the corresponding ISER register.
							1 << (IRQn & 0x1F): This part sets a specific bit within the selected ISER register. IRQn & 0x1F is a bitwise AND operation with 0x1F (31 in decimal), which ensures that the result is in the range of 0 to 31 (inclusive). The 1 << (IRQn & 0x1F) then shifts the value 1 to the left by the result of the AND operation, effectively setting the corresponding bit in the ISER register.
							In summary, this line of code enables a specific interrupt (IRQn) by setting the corresponding bit in the appropriate ISER register within the NVIC. This is a common operation in embedded systems programming when dealing with interrupts on ARM Cortex-M microcontrollers.*/
						
						Disable:
							NIVC->ICER[IRQn >> 5] = 1 << (IRQn & 0x1F); 
		2.Interupt piority:
			config by Interupt Piority Register (NVIC_IPRx)
				NVIC->IP[số ứng với piority của interupt] = (6 << 4) & 0xff;

			EXTIx và PAx sẽ như nhau, kiểu PA0 sẽ do EXTI0;
			Xem bảng Interupt Vector Table để biết Interupt Number và Memory Adress of IDR.
			Configurable External Interupt (FTSR, RTSR, SWIER)

			'code:'
			// in main code:
			// after enable GPIO clock and GPIOA_Init();

			// Enable and config interupt for PA0
			// NVIC_EnableIRQ(EXTI0_IRQn); // Enable interupt
			NVIC->ISER[];
			// Connect External Line to the GPI
			RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;


OLED:
	https://controllerstech.com/oled-display-using-i2c-stm32/
	
	I2C pin on STM32F103C8: (page 30/114 DS5319 Rev 19)
		PB10 	I2C2_SCL/USART3_TX(9) TIM2_CH3
		PB11 	I2C2_SDA/ USART3_RX(9)
